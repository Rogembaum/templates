#!groovy
//manual https://jenkins.io/doc/book/pipeline/
//check slave properties
properties ([disableConcurrentBuilds()])
pipeline {
    agent {
        label 'master'
    }

    environment {
        COMPOSE_ARGS = ' -f jenkins.yml -p jenkins '
        ERR = 0
    }

    triggers {
        pollSCM ('* * * * *')
    }
    options {
        buildDiscarder (logRotator(numToKeepStr: '5', artifactNumToKeepStr: '5'))
        timestamps ()
    }
    stages {

        stage ("SET ENV"){
            steps{
                echo "===================SET ENV==================="
                echo "${COMPOSE_ARGS}"
            }
        }

        stage ("STOP & RM OLD CONTAINERS"){
            steps{
                echo "===================STOP & RM OLD CONTAINERS==================="
                dir ('identidock'){
                    sh 'sudo docker-compose ${COMPOSE_ARGS} stop'
                    sh 'sudo docker-compose ${COMPOSE_ARGS} rm --force -v'
                }
            }
        }

        stage ("BUILD & UP"){
            steps{
                echo "===================BUILD & UP==================="
                dir ('identidock'){
                sh 'sudo docker-compose ${COMPOSE_ARGS} build --no-cache'
                sh 'sudo docker-compose ${COMPOSE_ARGS} up -d'
                }
            }
        }

        stage("UNIT TEST") {
            steps{
                echo "===================UNIT TEST==================="
                dir ('identidock'){
                  sh 'sudo docker-compose ${COMPOSE_ARGS} run --no-deps --rm -e ENV=UNIT identidock;  ERR=$?'
                }
            }
        }

        stage("SYSTEM TEST") {
            steps{
                echo "===================SYSTEM TEST==================="
                dir ('identidock'){
                    script {
                      if ( ERR == 0 ){
                      String IP = "(sh 'sudo docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' jenkins_identidock_1')"
                      int CODE = 200
                      //int CODE  = '(curl -sL -w "%{http_code}" IP:9090/monster/bla -o /dev/null)'
                        if ( CODE != 200 ){
                          echo "Site returned " CODE
                          assert ERR == 1
                        }
                      }
                    }
                }
            }
        }

        stage("ADD TAG") {
            steps{
                echo "===================ADD TAG==================="
                dir ('identidock'){
                  sh '''#!/bin/bash
                    HASH=$(git rev-parse --short HEAD)
                    sudo docker tag  jenkins_identidock rogembaum/identidock:${HASH}
                    sudo docker tag  jenkins_identidock rogembaum/identidock:newest
                  '''
                  echo "Test passing, now lets TAGGING"
                  echo "Lets Push"
                }
            }
        }
   }
}
